/**
 * Niledatabase regional APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateBasicUserRequest, TenantUser, UpdateUserRequest, User } from '../models/index';
export interface CreateTenantUserRequest {
    tenantId: string;
    createBasicUserRequest?: CreateBasicUserRequest;
}
export interface CreateUserRequest {
    tenantId?: string;
    newTenantName?: string;
    createBasicUserRequest?: CreateBasicUserRequest;
}
export interface ListTenantUsersRequest {
    tenantId: string;
}
export interface ListUsersRequest {
    tenantId?: string;
}
export interface SignUpRequest {
    tenantId?: string;
    newTenantName?: string;
    createBasicUserRequest?: CreateBasicUserRequest;
}
export interface UpdateUserOperationRequest {
    userid: string;
    updateUserRequest?: UpdateUserRequest;
}
/**
 * UsersApi - interface
 *
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Creates a new user and associates that user with the specified tenant.
     * @summary Create a user in a tenant
     * @param {string} tenantId
     * @param {CreateBasicUserRequest} [createBasicUserRequest] The email and password combination the user will use to authenticate. The &#x60;name&#x60; is optional; if provided it will be recorded in the &#x60;users&#x60; table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createTenantUser(requestParameters: CreateTenantUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * Creates a user in the database
     * @summary Creates a user
     * @param {string} [tenantId] A tenant id to add the user to when they are created
     * @param {string} [newTenantName] A tenant name to create, then the user to when they are created
     * @param {CreateBasicUserRequest} [createBasicUserRequest] The email and password combination the user will use to authenticate. The &#x60;name&#x60; is optional; if provided it will be recorded in the &#x60;users&#x60; table. The &#x60;newTenant&#x60; is optional; if provided, it is used as the name of a new tenant record associated with the newly created user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * Lists users that are associated with the specified tenant.
     * @summary List tenant users
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listTenantUsers(requestParameters: ListTenantUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>>;
    /**
     * Returns information about the users within the tenant provided. You can also pass the a `nile.tenant_id` in the header or in a cookie.
     * @summary lists users in the tenant
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listUsers(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantUser>>;
    /**
     * signs a user up and logs them in. Expects a email and password combo
     * @summary signs a user up
     * @param {string} [tenantId] A tenant id to add the user to when they are created
     * @param {string} [newTenantName] A tenant name to create, then the user to when they are created
     * @param {CreateBasicUserRequest} [createBasicUserRequest] The email and password combination the user will use to authenticate. The &#x60;name&#x60; is optional; if provided it will be recorded in the &#x60;users&#x60; table. The &#x60;newTenant&#x60; is optional; if provided, it is used as the name of a new tenant record associated with the newly created user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    signUp(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * updates a user within the tenant
     * @summary update a user
     * @param {string} userid
     * @param {UpdateUserRequest} [updateUserRequest] Update a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
}
/**
 *
 */
export declare class UsersApi extends runtime.BaseAPI implements UsersApiInterface {
    /**
     * Creates a new user and associates that user with the specified tenant.
     * Create a user in a tenant
     */
    createTenantUser(requestParameters: CreateTenantUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * Creates a user in the database
     * Creates a user
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * Lists users that are associated with the specified tenant.
     * List tenant users
     */
    listTenantUsers(requestParameters: ListTenantUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>>;
    /**
     * Returns information about the users within the tenant provided. You can also pass the a `nile.tenant_id` in the header or in a cookie.
     * lists users in the tenant
     */
    listUsers(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantUser>>;
    /**
     * signs a user up and logs them in. Expects a email and password combo
     * signs a user up
     */
    signUp(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * updates a user within the tenant
     * update a user
     */
    updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
}
//# sourceMappingURL=UsersApi.d.ts.map